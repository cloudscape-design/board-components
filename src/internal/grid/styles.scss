// plain `1fr` uses implicit `min-width: auto` which may overflow the container in some circumstances
// more details: https://css-tricks.com/preventing-a-grid-blowout/
$grid-col-width: minmax(0, 1fr);

.grid {
  display: grid;
  /* Matches GRID_GAP constant used for calculations. */
  /* TODO: consider using different gaps for comfortable/compact which would require a mode observer. */
  gap: 16px;
  /* Matches ROWSPAN_HEIGHT constant used for calculations. */
  grid-auto-rows: 100px;
}

.grid[data-columns="1"] {
  grid-template-columns: $grid-col-width;
}

.grid[data-columns="2"] {
  grid-template-columns: repeat(2, $grid-col-width);
}

.grid[data-columns="4"] {
  grid-template-columns: repeat(4, $grid-col-width);
}

$columns: 4;

@for $i from 1 through $columns {
  .grid[data-columns="1"] > .grid__item[data-column-span="#{$i}"] {
    grid-column-end: span 1;
  }

  .grid[data-columns="2"] > .grid__item[data-column-span="#{$i}"] {
    grid-column-end: span $i;
  }

  .grid[data-columns="4"] > .grid__item[data-column-span="#{$i}"] {
    grid-column-end: span $i;
  }
}

@for $i from 1 through $columns {
  .grid[data-columns="1"] > .grid__item[data-column-offset="#{$i}"] {
    grid-column-start: 1;
  }

  .grid[data-columns="2"] > .grid__item[data-column-offset="#{$i}"] {
    grid-column-start: $i;
  }

  .grid[data-columns="4"] > .grid__item[data-column-offset="#{$i}"] {
    grid-column-start: $i;
  }
}

.grid__item {
  display: block;
  position: relative;
}
