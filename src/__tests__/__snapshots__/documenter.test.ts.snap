// Vitest Snapshot v1

exports[`definition for board matches the snapshot > board 1`] = `
{
  "events": [
    {
      "cancelable": false,
      "description": "Fired when a user interaction changes size or position of board items.
The change detail has the following properties:
* \`items\`: (readonly Item<D>[]) - the updated items array.
* \`addedItem\`: (Item<D>, optional) - the item that was added as part of the update if available.
* \`removedItem\`: (Item<D>, optional) - the item that was removed as part of the update if available.
",
      "detailInlineType": {
        "name": "BoardProps.ItemsChangeDetail",
        "properties": [
          {
            "name": "addedItem",
            "optional": true,
            "type": "BoardProps.Item<D>",
          },
          {
            "name": "items",
            "optional": false,
            "type": "ReadonlyArray<BoardProps.Item<D>>",
          },
          {
            "name": "removedItem",
            "optional": true,
            "type": "BoardProps.Item<D>",
          },
        ],
        "type": "object",
      },
      "detailType": "BoardProps.ItemsChangeDetail<D>",
      "name": "onItemsChange",
    },
  ],
  "functions": [],
  "name": "Board",
  "properties": [
    {
      "description": "An object containing all the necessary localized strings required by the component.
Live announcements:
* \`liveAnnouncementDndStarted(BoardProps.DndOperationType): string\` - the function to create a live announcement string for DnD (\\"reorder\\", \\"resize\\" or \\"insert\\") start.
* \`liveAnnouncementDndItemReordered(BoardProps.DndReorderState<D>): string\` - the function to create a live announcement string when DnD reorder is performed.
* \`liveAnnouncementDndItemResized(BoardProps.DndResizeState<D>): string\` - the function to create a live announcement string when DnD resize is performed.
* \`liveAnnouncementDndItemInserted(BoardProps.DndInsertState<D>): string\` - the function to create a live announcement string when DnD insert is performed.
* \`liveAnnouncementDndDiscarded(BoardProps.DndOperationType): string\` - the function to create a live announcement string for DnD (\\"reorder\\", \\"resize\\" or \\"insert\\") commit.
* \`liveAnnouncementDndCommitted(BoardProps.DndOperationType): string\` - the function to create a live announcement string for DnD (\\"reorder\\", \\"resize\\" or \\"insert\\") discard.
* \`liveAnnouncementOperationRemove(BoardProps.OperationStateRemove<D>): string\` - the function to create a live announcement string for item removal.

Navigation labels:
* \`navigationAriaLabel\` (string) - the ARIA label for the accessible board navigation element.
* \`navigationAriaDescription\` (string, optional) - the ARIA description for the accessible board navigation element.
* \`navigationItemAriaLabel(null | BoardProps.Item<D>): string\` - the function to create the ARIA label for a navigation board item or an empty slot.
",
      "inlineType": {
        "name": "BoardProps.I18nStrings",
        "properties": [
          {
            "name": "liveAnnouncementDndCommitted",
            "optional": false,
            "type": "(operationType: BoardProps.DndOperationType) => string",
          },
          {
            "name": "liveAnnouncementDndDiscarded",
            "optional": false,
            "type": "(operationType: BoardProps.DndOperationType) => string",
          },
          {
            "name": "liveAnnouncementDndItemInserted",
            "optional": false,
            "type": "(operation: BoardProps.DndInsertState<D>) => string",
          },
          {
            "name": "liveAnnouncementDndItemReordered",
            "optional": false,
            "type": "(operation: BoardProps.DndReorderState<D>) => string",
          },
          {
            "name": "liveAnnouncementDndItemResized",
            "optional": false,
            "type": "(operation: BoardProps.DndResizeState<D>) => string",
          },
          {
            "name": "liveAnnouncementDndStarted",
            "optional": false,
            "type": "(operationType: BoardProps.DndOperationType) => string",
          },
          {
            "name": "liveAnnouncementItemRemoved",
            "optional": false,
            "type": "(operation: BoardProps.ItemRemovedState<D>) => string",
          },
          {
            "name": "navigationAriaDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "navigationAriaLabel",
            "optional": false,
            "type": "string",
          },
          {
            "name": "navigationItemAriaLabel",
            "optional": false,
            "type": "(item: BoardProps.Item<D> | null) => string",
          },
        ],
        "type": "object",
      },
      "name": "i18nStrings",
      "optional": false,
      "type": "BoardProps.I18nStrings<D>",
    },
    {
      "description": "Specifies the items displayed in the board. Each item includes its position on the board and
optional data. The content of an item is controlled by the \`renderItem\` property.
The BoardProps.Item includes:
* \`id\` (string) - the unique item identifier. The IDs of any two items in a page must be different.
* \`definition.minRowSpan\` (number, optional) - the minimal number of rows the item is allowed to take. It can't be less than 2. Defaults to 2.
* \`definition.minColumnSpan\` (number, optional) - the minimal number of columns the item is allowed to take (in 4-column layout). It can't be less than 1. Defaults to 1.
* \`definition.defaultRowSpan\` (number) - the number or rows the item will take when inserted to the board. It can't be less than \`definition.minRowSpan\`.
* \`definition.defaultColumnSpan\` (number) - the number or columns the item will take (in 4-column layout) when inserted to the board. It can't be less than \`definition.minColumnSpan\`.
* \`columnOffset\` (number) - the item's offset from the first column starting from 0. The value is updated by \`onItemsChange\` after an update is committed.
* \`rowSpan\` (number) - the item's vertical size starting from 2. The value is updated by \`onItemsChange\` after an update is committed.
* \`columnSpan\` (number) - the item's vertical size starting from 1. The value is updated by \`onItemsChange\` after an update is committed.
* \`data\` (D) - the optional item's data which can include item's specific configuration, title etc.
",
      "name": "items",
      "optional": false,
      "type": "ReadonlyArray<BoardProps.Item<D>>",
    },
    {
      "description": "Specifies a function to render a board item content. The return value must include board item component.
The function takes the item and its associated actions (BoardProps.ItemActions) that include:
* \`removeItem(): void\` - the callback to issue the item's removal. Once issued, the \`onItemsChange\` will fire to update the state.
",
      "name": "renderItem",
      "optional": false,
      "type": "(item: BoardProps.Item<D>, actions: BoardProps.ItemActions) => Element",
    },
  ],
  "regions": [
    {
      "description": "Rendered when the \`items\` array is empty.
When items are loading the slot can be used to render the loading indicator.
",
      "isDefault": false,
      "name": "empty",
    },
  ],
  "releaseStatus": "stable",
}
`;

exports[`definition for board-item matches the snapshot > board-item 1`] = `
{
  "events": [],
  "functions": [],
  "name": "BoardItem",
  "properties": [
    {
      "description": "Determines whether the main content of the item has padding. If \`true\`, removes the default padding
from the content area.",
      "name": "disableContentPaddings",
      "optional": true,
      "type": "boolean",
    },
    {
      "description": "An object containing all the necessary localized strings required by the component.
ARIA labels:
* \`dragHandleAriaLabel\` (string) - the ARIA label for the drag handle.
* \`dragHandleAriaDescription\` (string, optional) - the ARIA description for the drag handle.
* \`resizeHandleAriaLabel\` (string) - the ARIA label for the resize handle.
* \`resizeHandleAriaDescription\` (string, optional) - the ARIA description for the resize handle.
",
      "inlineType": {
        "name": "BoardItemProps.I18nStrings",
        "properties": [
          {
            "name": "dragHandleAriaDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "dragHandleAriaLabel",
            "optional": false,
            "type": "string",
          },
          {
            "name": "resizeHandleAriaDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "resizeHandleAriaLabel",
            "optional": false,
            "type": "string",
          },
        ],
        "type": "object",
      },
      "name": "i18nStrings",
      "optional": false,
      "type": "BoardItemProps.I18nStrings",
    },
  ],
  "regions": [
    {
      "description": "Main content of the item.",
      "isDefault": true,
      "name": "children",
    },
    {
      "description": "Footer of the item.",
      "isDefault": false,
      "name": "footer",
    },
    {
      "description": "Heading element of the item. Use the [header component](/components/header/).",
      "isDefault": false,
      "name": "header",
    },
    {
      "description": "Additional slot next to the heading. Use it to render an overflow actions menu in the form of a button dropdown.",
      "isDefault": false,
      "name": "settings",
    },
  ],
  "releaseStatus": "stable",
}
`;

exports[`definition for items-palette matches the snapshot > items-palette 1`] = `
{
  "events": [],
  "functions": [],
  "name": "ItemsPalette",
  "properties": [
    {
      "description": "An object containing all the necessary localized strings required by the component.
Live announcements:
* \`liveAnnouncementDndStarted\` (string) - the live announcement string for the DnD start.
* \`liveAnnouncementDndDiscarded\` (string) - the live announcement string for the DnD discard.

Navigation labels:
* \`navigationAriaLabel\` (string) - the ARIA label for the accessible board navigation element.
* \`navigationAriaDescription\` (string, optional) - the ARIA description for the accessible board navigation element.
* \`navigationItemAriaLabel(null | BoardProps.Item<D>): string\` - the function to create the ARIA label for a navigation board item.
",
      "inlineType": {
        "name": "ItemsPaletteProps.I18nStrings",
        "properties": [
          {
            "name": "liveAnnouncementDndDiscarded",
            "optional": false,
            "type": "string",
          },
          {
            "name": "liveAnnouncementDndStarted",
            "optional": false,
            "type": "string",
          },
          {
            "name": "navigationAriaDescription",
            "optional": true,
            "type": "string",
          },
          {
            "name": "navigationAriaLabel",
            "optional": false,
            "type": "string",
          },
          {
            "name": "navigationItemAriaLabel",
            "optional": false,
            "type": "(item: ItemsPaletteProps.Item<D>) => string",
          },
        ],
        "type": "object",
      },
      "name": "i18nStrings",
      "optional": false,
      "type": "ItemsPaletteProps.I18nStrings<D>",
    },
    {
      "description": "Specifies the items displayed in the palette. The content of each item is controlled by the \`renderItem\` property.
The ItemsPaletteProps.Item includes:
* \`id\` (string) - the unique item identifier. The IDs of any two items in a page must be different.
* \`definition.minRowSpan\` (number, optional) - the minimal number of rows the item is allowed to take. It can't be less than 2. Defaults to 2.
* \`definition.minColumnSpan\` (number, optional) - the minimal number of columns the item is allowed to take (in 4-column layout). It can't be less than 1. Defaults to 1.
* \`definition.defaultRowSpan\` (number) - the number or rows the item will take when inserted to the board. It can't be less than \`definition.minRowSpan\`.
* \`definition.defaultColumnSpan\` (number) - the number or columns the item will take (in 4-column layout) when inserted to the board. It can't be less than \`definition.minColumnSpan\`.
* \`data\` (D) - the optional item's data which can include item's specific configuration, title etc.
",
      "name": "items",
      "optional": false,
      "type": "ReadonlyArray<ItemsPaletteProps.Item<D>>",
    },
    {
      "description": "Specifies a function to render a palette item content. The return value must include board item component.
The function takes the item and its associated context (ItemsPaletteProps.ItemContext) that include:
* \`showPreview\` (boolean) - a flag that indicates if the item's content needs to be rendered in the preview mode.
",
      "name": "renderItem",
      "optional": false,
      "type": "(item: ItemsPaletteProps.Item<D>, context: ItemsPaletteProps.ItemContext) => Element",
    },
  ],
  "regions": [],
  "releaseStatus": "stable",
}
`;
